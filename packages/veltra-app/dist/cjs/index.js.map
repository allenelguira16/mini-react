{"version":3,"file":"index.js","sources":["../../src/runtime/state/untrack.ts","../../src/runtime/state/state.ts","../../src/runtime/state/computed.ts","../../src/runtime/render/create-root.ts","../../src/util/loop.ts","../../src/util/memo.ts","../../src/util/clean-log.ts"],"sourcesContent":["export let shouldTrack = true;\n\nexport function untrack<T>(fn: () => T): T {\n  const prev = shouldTrack;\n  shouldTrack = false; // turn off tracking\n  const result = fn();\n  shouldTrack = prev; // restore tracking\n  return result;\n}\n","import { Subscriber, getSubscriber } from \"./subscriber\";\nimport { shouldTrack } from \"./untrack\";\n\nexport type State<T> = {\n  value: T;\n};\n\nexport function state<T>(initialValue: T): State<T>;\nexport function state<T = undefined>(): State<T | undefined>;\nexport function state<T>(initialValue?: T): State<T | undefined> {\n  let value = initialValue;\n  let subscriptions = new Set<Subscriber>();\n\n  return {\n    get value() {\n      if (!shouldTrack) return value;\n\n      const subscriber = getSubscriber();\n      if (subscriber && !subscriptions.has(subscriber)) {\n        subscriptions.add(subscriber);\n        subscriber.subscriptions = subscriptions;\n      }\n\n      return value;\n    },\n    set value(newValue) {\n      value = newValue;\n\n      subscriptions.forEach((fn) => fn());\n    },\n  };\n}\n","import { Subscriber, watchSubscriber, getSubscriber } from \"./subscriber\";\n\nexport function computed<T>(fn: () => T) {\n  let value: T;\n  let subscriptions = new Set<Subscriber>();\n\n  const subscriber: Subscriber = () => {\n    // When a dependency changes, recompute:\n    value = fn();\n    // Notify anything that depends on this computed:\n    subscriptions.forEach((sub) => sub());\n  };\n\n  // First run to collect dependencies:\n  watchSubscriber(subscriber);\n  value = fn(); // compute initial value\n\n  return {\n    get value() {\n      // When someone accesses this computed, register as a dependency:\n      const subscriber = getSubscriber();\n      if (subscriber && !subscriptions.has(subscriber)) {\n        subscriptions.add(subscriber);\n        subscriber.subscriptions = subscriptions;\n      }\n      return value;\n    },\n  };\n}\n","export function createRoot($root: HTMLElement, app: JSX.Element) {\n  if (typeof app === \"function\") {\n    const result = app();\n    createRoot($root, result);\n  } else if (app instanceof HTMLElement || app instanceof Text) {\n    $root.appendChild(app);\n  } else if (Array.isArray(app)) {\n    app.forEach((child) => createRoot($root, child));\n  }\n}\n","import { jsx } from \"~/jsx-runtime\";\nimport { onDestroy, onMount, runComponentCleanup } from \"~/runtime/life-cycle\";\nimport { componentRootNodes } from \"~/runtime/render\";\nimport { reactor, State, state, untrack } from \"~/runtime/state\";\nimport { toArray } from \"~/util\";\n\ntype ForProps<T> = {\n  items: () => T[];\n  children: [(item: T, index: { value: number }) => JSX.Element];\n};\n\ntype Entry<T> = {\n  id: number;\n  item: T;\n  nodes: Node[];\n  index: { value: number };\n};\n\nexport function loop<T>(items: T[]) {\n  function For<T>(props: ForProps<T>) {\n    const {\n      items: each,\n      children: [children],\n    } = props;\n\n    const $rootNode = document.createTextNode(\"\");\n\n    let entries: Entry<T>[] = [];\n    let idCounter = 0;\n\n    function reconcile($parent: Node, items: T[]) {\n      const newCounts = countOccurrences(items);\n      const oldCounts = countOccurrences(entries.map((e) => e.item));\n\n      // Remove extra\n      entries = entries.filter((entry) => {\n        if (\n          (oldCounts.get(entry.item) ?? 0) > (newCounts.get(entry.item) ?? 0)\n        ) {\n          removeEntryNodes($parent, entry);\n          oldCounts.set(entry.item, (oldCounts.get(entry.item) ?? 0) - 1);\n          return false;\n        }\n        return true;\n      });\n\n      // Add new\n      const addedEntries: Entry<T>[] = [];\n      const seenCounts = new Map<T, number>();\n      for (const item of items) {\n        seenCounts.set(item, (seenCounts.get(item) || 0) + 1);\n        const exists =\n          entries.filter((e) => e.item === item).length +\n          addedEntries.filter((e) => e.item === item).length;\n        if (exists < (seenCounts.get(item) || 0)) {\n          const indexState = state(-1);\n          const nodes = toArray(children(item, indexState)) as Node[];\n          addedEntries.push({\n            id: idCounter++,\n            item,\n            nodes,\n            index: indexState,\n          });\n        }\n      }\n      entries.push(...addedEntries);\n\n      reorderEntries($rootNode, $parent, entries, items);\n    }\n\n    onMount(() => {\n      reactor(() => {\n        const $parent = $rootNode.parentNode;\n        if (!$parent) return;\n        reconcile($parent, [...each()]);\n      });\n    });\n\n    onDestroy(() => {\n      for (const entry of entries) {\n        removeEntryNodes($rootNode.parentNode!, entry);\n      }\n    });\n\n    componentRootNodes.add($rootNode);\n    return $rootNode;\n  }\n\n  return {\n    each: (children: (item: T, index: State<number>) => JSX.Element) => {\n      // Use jsx to register it as a component\n      // That way we can use life cycles hooks\n      return jsx(For, {\n        items: () => items,\n        children,\n      });\n    },\n  };\n}\n\n// Helpers\nfunction removeEntryNodes<T>($parent: Node, entry: Entry<T>) {\n  for (const node of entry.nodes) {\n    if ($parent.contains(node)) {\n      runComponentCleanup(node);\n      $parent.removeChild(node);\n    }\n  }\n}\n\nfunction insertNodes($parent: Node, nodes: Node[], referenceNode: Node | null) {\n  for (const node of nodes) {\n    $parent.insertBefore(node, referenceNode);\n  }\n}\n\nfunction reorderEntries<T>(\n  $rootNode: Node,\n  $parent: Node,\n  entries: Entry<T>[],\n  items: T[]\n) {\n  const placeCounts = new Map<T, number>();\n  let ref: Node | null = $rootNode.nextSibling;\n\n  for (let i = 0; i < items.length; i++) {\n    const item = items[i];\n    placeCounts.set(item, (placeCounts.get(item) || 0) + 1);\n    let count = 0;\n    const entry = entries.find(\n      (e) => e.item === item && ++count === placeCounts.get(item)\n    );\n    if (!entry) continue;\n    untrack(() => (entry.index.value = i));\n    insertNodes($parent, entry.nodes, ref);\n    ref = entry.nodes[entry.nodes.length - 1].nextSibling;\n  }\n}\n\nfunction countOccurrences<T>(list: T[]) {\n  const counts = new Map<T, number>();\n  for (const item of list) counts.set(item, (counts.get(item) || 0) + 1);\n  return counts;\n}\n","export function memo<T>(fn: () => T) {\n  let cachedResult: T;\n  let firstRun = true;\n\n  return () => {\n    if (firstRun) {\n      cachedResult = fn();\n      firstRun = false;\n    }\n    return cachedResult;\n  };\n}\n","import { componentRootNodes } from \"~/runtime\";\n\nexport function cleanLog($nodes: Node[]) {\n  const $newNodes = [\n    ...$nodes.filter(\n      ($node) => !($node instanceof Text && componentRootNodes.has($node))\n    ),\n  ];\n\n  return $newNodes.length === 1 ? $newNodes[0] : $newNodes;\n}\n"],"names":["shouldTrack","untrack","fn","prev","result","state","initialValue","value","subscriptions","subscriber","getSubscriber","newValue","computed","watchSubscriber","sub","createRoot","$root","app","child","loop","items","For","props","each","children","$rootNode","entries","idCounter","reconcile","$parent","newCounts","countOccurrences","oldCounts","e","entry","removeEntryNodes","addedEntries","seenCounts","item","indexState","nodes","toArray","reorderEntries","onMount","reactor","onDestroy","componentRootNodes","jsx","node","runComponentCleanup","insertNodes","referenceNode","placeCounts","ref","i","count","list","counts","memo","cachedResult","firstRun","cleanLog","$nodes","$newNodes","$node"],"mappings":"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"}