{"version":3,"file":"index.js","sources":["../../src/state/computed.ts","../../src/state/untrack.ts","../../src/render/create-root.ts","../../src/util/loop/util.ts","../../src/util/loop/loop.ts","../../src/util/memo.ts","../../src/util/log-jsx.ts","../../src/util/resource.ts"],"sourcesContent":["import { state } from \"./state\"; // your Veltra's state()\nimport { effect } from \"./effect\";\n\nexport type Computed<T> = {\n  readonly value: T;\n};\n\nexport function computed<T>(getter: () => T): Computed<T> {\n  const result = state<T>(); // Real state that reactors and effects can track\n\n  effect(() => {\n    result.value = getter(); // when dependencies change, recompute and trigger .value\n  });\n\n  return {\n    get value() {\n      return result.value as T; // will track this as a true state()\n    },\n  };\n}\n","import { activeEffect, setActiveEffect } from \"./effect\";\n\nexport function untrack<T>(fn: () => T): T {\n  const prevEffect = activeEffect;\n  setActiveEffect(null); // disable tracking\n\n  try {\n    return fn();\n  } finally {\n    setActiveEffect(prevEffect); // restore previous tracking context\n  }\n}\n","import { toArray } from \"~/util\";\nimport { renderChildren } from \"./render-children\";\n\nexport function createRoot($root: HTMLElement, App: () => JSX.Element) {\n  renderChildren($root, toArray(App()));\n}\n","import { runComponentCleanup } from \"~/life-cycle\";\nimport { state, untrack } from \"~/state\";\nimport { Entry } from \"./index\";\nimport { toArray } from \"../to-array\";\n\n// Helpers\nexport function removeEntryNodes<T>($parent: Node, entry: Entry<T>) {\n  for (const node of entry.nodes) {\n    if ($parent.contains(node)) {\n      runComponentCleanup(node);\n      $parent.removeChild(node);\n    }\n  }\n}\n\nexport function insertNodes(\n  $parent: Node,\n  nodes: Node[],\n  referenceNode: Node | null\n) {\n  for (const node of nodes) {\n    $parent.insertBefore(node, referenceNode);\n  }\n}\n\nexport function reorderEntries<T>(\n  $rootNode: Node,\n  $parent: Node,\n  entries: Entry<T>[],\n  items: T[]\n) {\n  const placeCounts = new Map<T, number>();\n  let ref: Node | null = $rootNode.nextSibling;\n\n  for (let i = 0; i < items.length; i++) {\n    const item = items[i];\n    placeCounts.set(item, (placeCounts.get(item) || 0) + 1);\n    let count = 0;\n    const entry = entries.find(\n      (e) => e.item === item && ++count === placeCounts.get(item)\n    );\n    if (!entry) continue;\n    untrack(() => (entry.index.value = i));\n    insertNodes($parent, entry.nodes, ref);\n    ref = entry.nodes[entry.nodes.length - 1].nextSibling;\n  }\n}\n\nexport function countOccurrences<T>(list: T[]) {\n  const counts = new Map<T, number>();\n  for (const item of list) counts.set(item, (counts.get(item) || 0) + 1);\n  return counts;\n}\n\nexport function removeOldNodes<T>(\n  $parent: Node,\n  items: T[],\n  entries: Entry<T>[]\n) {\n  const newCounts = countOccurrences(items);\n  const oldCounts = countOccurrences(entries.map((e) => e.item));\n\n  return entries.filter((entry) => {\n    if ((oldCounts.get(entry.item) ?? 0) > (newCounts.get(entry.item) ?? 0)) {\n      removeEntryNodes($parent, entry);\n      oldCounts.set(entry.item, (oldCounts.get(entry.item) ?? 0) - 1);\n      return false;\n    }\n    return true;\n  });\n}\n\nexport function newEntries<T>(\n  items: T[],\n  entries: Entry<T>[],\n  children: (\n    item: T,\n    index: {\n      value: number;\n    }\n  ) => JSX.Element,\n  idCounter: number\n) {\n  const addedEntries: Entry<T>[] = [];\n  const seenCounts = new Map<T, number>();\n  for (const item of items) {\n    seenCounts.set(item, (seenCounts.get(item) || 0) + 1);\n    const exists =\n      entries.filter((e) => e.item === item).length +\n      addedEntries.filter((e) => e.item === item).length;\n    if (exists < (seenCounts.get(item) || 0)) {\n      const indexState = state(-1);\n      const nodes = toArray(children(item, indexState)) as Node[];\n      addedEntries.push({\n        id: idCounter++,\n        item,\n        nodes,\n        index: indexState,\n      });\n    }\n  }\n\n  return addedEntries;\n}\n","import { getCurrentSuspense } from \"~/context\";\nimport { jsx } from \"../../jsx-runtime\";\nimport { onDestroy, onMount } from \"../../life-cycle\";\nimport { componentRootNodes, suspensePromise } from \"../../render\";\nimport { effect as reactor, State, untrack } from \"../../state\";\nimport {\n  newEntries,\n  removeEntryNodes,\n  removeOldNodes,\n  reorderEntries,\n} from \"./util\";\n\ntype ForProps<T> = {\n  items: () => T[];\n  children: [(item: T, index: { value: number }) => JSX.Element];\n};\n\nexport type Entry<T> = {\n  id: number;\n  item: T;\n  nodes: Node[];\n  index: { value: number };\n};\n\n// export let isOnLoop = state(false);\n\nexport function loop<T>(items: T[]) {\n  function For<T>(props: ForProps<T>) {\n    const {\n      items: each,\n      children: [children],\n    } = props;\n\n    const $rootNode = document.createTextNode(\"\");\n\n    let entries: Entry<T>[] = [];\n    let idCounter = 0;\n\n    function reconcile($parent: Node, items: T[]) {\n      // Remove extra\n      entries = removeOldNodes($parent, items, entries);\n      // Add new\n      entries.push(...newEntries(items, entries, children, idCounter));\n\n      reorderEntries($rootNode, $parent, entries, items);\n    }\n\n    // const suspense = getCurrentSuspense();\n\n    onMount(() => {\n      reactor(() => {\n        const $parent = $rootNode.parentNode;\n        if (!$parent) return;\n\n        try {\n          reconcile($parent, [...each()]);\n        } catch (errorOrPromise) {\n          if (errorOrPromise instanceof Promise) {\n            suspensePromise.value = errorOrPromise;\n          } else {\n            throw errorOrPromise;\n          }\n        }\n      });\n    });\n\n    onDestroy(() => {\n      for (const entry of entries) {\n        removeEntryNodes($rootNode.parentNode!, entry);\n      }\n    });\n\n    componentRootNodes.add($rootNode);\n    return $rootNode;\n  }\n\n  return {\n    each: (children: (item: T, index: State<number>) => JSX.Element) => {\n      // Use jsx to register it as a component\n      // That way we can use life cycles hooks\n      return jsx(For, {\n        items: () => items,\n        children,\n      });\n    },\n  };\n}\n","export function memo<T>(fn: () => T) {\n  let cachedResult: T;\n  let firstRun = true;\n\n  return () => {\n    if (firstRun) {\n      cachedResult = fn();\n      firstRun = false;\n    }\n    return cachedResult;\n  };\n}\n","import { componentRootNodes } from \"../render\";\n\nexport function logJsx($nodes: Node[]) {\n  const $newNodes = [\n    ...$nodes.filter(\n      ($node) => !($node instanceof Text && componentRootNodes.has($node))\n    ),\n  ];\n\n  return $newNodes.length === 1 ? $newNodes[0] : $newNodes;\n}\n","import { effect, state } from \"~/state\";\n\nexport function resource<T, A>(fetcher: (...args: A[]) => Promise<T>) {\n  const loading = state(true);\n  const error = state<any>(null);\n  const version = state(0); // trigger reactivity\n  let promise = state<Promise<void>>(); // reactive promise holder\n  let value: T | undefined;\n\n  const refetch = () => {\n    loading.value = true;\n\n    promise.value = new Promise<void>((resolve, reject) => {\n      fetcher()\n        .then((result) => {\n          value = result;\n          loading.value = false;\n          error.value = null;\n          version.value++; // trigger dependent effects\n          resolve();\n        })\n        .catch((err) => {\n          error.value = err;\n          loading.value = false;\n          version.value++; // trigger even on error\n          reject(err);\n        });\n    });\n\n    return promise.value;\n  };\n\n  // Initial fetch immediately\n  effect(() => {\n    refetch();\n  });\n\n  return {\n    get value() {\n      version.value; // make value reactive to version\n      const pendingPromise = promise.value;\n\n      if (loading.value) throw pendingPromise;\n      if (error.value) throw error.value;\n      // console.log(pendingPromise, loading.value);\n\n      return value as T;\n    },\n    loading,\n    error,\n    refetch,\n\n    // âœ… mutate with version bump (trigger effects/reactors)\n    set mutate(newValue: T) {\n      value = newValue;\n      version.value++; // trigger reactivity\n    },\n  };\n}\n"],"names":["computed","getter","result","state","effect","untrack","fn","prevEffect","activeEffect","setActiveEffect","createRoot","$root","App","renderChildren","toArray","removeEntryNodes","$parent","entry","node","runComponentCleanup","insertNodes","nodes","referenceNode","reorderEntries","$rootNode","entries","items","placeCounts","ref","i","item","count","e","countOccurrences","list","counts","removeOldNodes","newCounts","oldCounts","newEntries","children","idCounter","addedEntries","seenCounts","indexState","loop","For","props","each","reconcile","onMount","reactor","errorOrPromise","suspensePromise","onDestroy","componentRootNodes","jsx","memo","cachedResult","firstRun","logJsx","$nodes","$newNodes","$node","resource","fetcher","loading","error","version","promise","value","refetch","resolve","reject","err","pendingPromise","newValue"],"mappings":"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"}