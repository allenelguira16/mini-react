{"version":3,"file":"index.js","sources":["../../src/index.tsx"],"sourcesContent":["import { effect, state } from \"@veltra/app\";\n\nexport type Route = {\n  path: string;\n  component: () => JSX.Element;\n  children?: Route[];\n  guard?: () => boolean;\n  lazy?: () => Promise<{ default: () => JSX.Element }>;\n};\n\nexport type Location = {\n  pathname: string;\n  search: string;\n};\n\nexport const location = state<Location>({\n  pathname: window.location.pathname,\n  search: window.location.search,\n});\n\nwindow.addEventListener(\"popstate\", () => {\n  location.value = {\n    ...location.value,\n    pathname: window.location.pathname,\n  };\n});\n\n/**\n * navigate to a path\n *\n * @param path - The path to navigate to.\n */\nexport function navigate(path: string) {\n  history.pushState(null, \"\", path);\n  location.value = {\n    ...location.value,\n    pathname: path,\n  };\n}\n\nfunction matchRoute(path: string, routes: Route[]): Route | undefined {\n  for (const route of routes) {\n    if (route.path === path) return route;\n    if (route.children) {\n      const child = matchRoute(path, route.children);\n      if (child) return child;\n    }\n  }\n  return undefined;\n}\n\n/**\n * create a router\n *\n * @param props - The properties of the router.\n * @returns The router.\n */\nexport function Router(props: { routes: Route[] }) {\n  const current = state<() => JSX.Element>(() => <></>);\n\n  effect(() => {\n    const matched = matchRoute(location.value.pathname, props.routes);\n    if (matched) {\n      if (matched.guard && !matched.guard()) {\n        current.value = () => <div>Access Denied</div>;\n        return;\n      }\n      if (matched.lazy) {\n        matched.lazy().then((mod) => {\n          current.value = mod.default;\n        });\n        return;\n      }\n      current.value = matched.component;\n    } else {\n      current.value = () => <div>404 Not Found</div>;\n    }\n  });\n\n  return () => {\n    return <>{current.value()}</>;\n  };\n}\n"],"names":["location","state","navigate","path","matchRoute","routes","route","child","Router","props","current","jsx","Fragment","effect","matched","mod"],"mappings":"+EAea,MAAAA,EAAWC,QAAgB,CACtC,SAAU,OAAO,SAAS,SAC1B,OAAQ,OAAO,SAAS,MAC1B,CAAC,EAED,OAAO,iBAAiB,WAAY,IAAM,CACxCD,EAAS,MAAQ,CACf,GAAGA,EAAS,MACZ,SAAU,OAAO,SAAS,QAC5B,CACF,CAAC,EAOe,SAAAE,EAASC,EAAc,CACrC,QAAQ,UAAU,KAAM,GAAIA,CAAI,EAChCH,EAAS,MAAQ,CACf,GAAGA,EAAS,MACZ,SAAUG,CACZ,CACF,CAEA,SAASC,EAAWD,EAAcE,EAAoC,CACpE,UAAWC,KAASD,EAAQ,CAC1B,GAAIC,EAAM,OAASH,EAAM,OAAOG,EAChC,GAAIA,EAAM,SAAU,CAClB,MAAMC,EAAQH,EAAWD,EAAMG,EAAM,QAAQ,EAC7C,GAAIC,EAAO,OAAOA,CACpB,CACF,CAEF,UAQgBC,EAAOC,EAA4B,CACjD,MAAMC,EAAUT,EAAAA,MAAyB,IAAMU,EAAAA,IAAAC,WAAA,CAAE,CAAA,CAAG,EAEpD,OAAAC,EAAAA,OAAO,IAAM,CACX,MAAMC,EAAUV,EAAWJ,EAAS,MAAM,SAAUS,EAAM,MAAM,EAChE,GAAIK,EAAS,CACX,GAAIA,EAAQ,OAAS,CAACA,EAAQ,QAAS,CACrCJ,EAAQ,MAAQ,IAAMC,MAAC,MAAI,CAAA,SAAA,eAAA,CAAa,EACxC,MACF,CACA,GAAIG,EAAQ,KAAM,CAChBA,EAAQ,OAAO,KAAMC,GAAQ,CAC3BL,EAAQ,MAAQK,EAAI,OACtB,CAAC,EACD,MACF,CACAL,EAAQ,MAAQI,EAAQ,SAC1B,MACEJ,EAAQ,MAAQ,IAAMC,EAAAA,IAAC,OAAI,SAAa,eAAA,CAAA,CAE5C,CAAC,EAEM,IACEA,MAAAC,WAAA,CAAG,SAAAF,EAAQ,MAAA,EAAQ,CAE9B"}