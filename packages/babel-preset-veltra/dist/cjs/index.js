"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var m=require("@babel/preset-react"),f=require("@babel/helper-plugin-utils"),g=require("@babel/types");function v(s){var o=Object.create(null);return s&&Object.keys(s).forEach(function(a){if(a!=="default"){var n=Object.getOwnPropertyDescriptor(s,a);Object.defineProperty(o,a,n.get?n:{enumerable:!0,get:function(){return s[a]}})}}),o.default=s,Object.freeze(o)}var e=v(g);const E=f.declare(s=>(s.assertVersion(7),{visitor:{Program(o,a){const n=a.filename||"";if(n.includes("/veltra-app/")||n.includes("\\veltra-app\\")||n.includes("/node_modules/@veltra/app/")||n.includes("\\node_modules\\@veltra\\app\\"))return;let u=!1;o.get("body").forEach(r=>{r.isImportDeclaration()&&r.node.source.value==="@veltra/app"&&r.node.specifiers.forEach(i=>{if(e.isImportSpecifier(i)){const l=i.imported;e.isIdentifier(l)&&l.name==="loop"&&(u=!0)}})});const t=[];if(u||t.push(e.importSpecifier(e.identifier("loop"),e.identifier("loop"))),t.length){const r=e.importDeclaration(t,e.stringLiteral("@veltra/app"));o.unshiftContainer("body",r)}},JSXExpressionContainer(o){const a=o.get("expression");function n(t){const r=t.node;if(e.isCallExpression(r)&&e.isMemberExpression(r.callee)&&e.isIdentifier(r.callee.property)&&r.callee.property.name==="map"){const i=r.arguments[0],l=r.callee.object;if(e.isArrowFunctionExpression(i)&&i.params.length>=2){const p=i.params[1];e.isIdentifier(p)&&e.traverseFast(i.body,c=>{if(e.isIdentifier(c)&&c.name===p.name){const d=e.memberExpression(e.identifier(p.name),e.identifier("value"));Object.assign(c,d)}})}return e.callExpression(e.memberExpression(e.callExpression(e.identifier("loop"),[e.arrowFunctionExpression([],l)]),e.identifier("each")),[i])}return null}function u(t){const r=t.node;if(e.isLogicalExpression(r)){const i=t.get("right"),l=n(i);l&&i.replaceWith(l)}else if(e.isConditionalExpression(r)){const i=t.get("consequent"),l=t.get("alternate"),p=n(i),c=n(l);p&&i.replaceWith(p),c&&l.replaceWith(c)}else{const i=n(t);i&&t.replaceWith(i)}}u(a)}}})),x=f.declare(s=>(s.assertVersion(7),{visitor:{JSXExpressionContainer(o){const a=o.get("expression");e.isJSXEmptyExpression(a.node)||(o.node.expression=e.arrowFunctionExpression([],a.node))}}}));function b(s){return s.assertVersion(7),{presets:[[m,{runtime:"automatic",importSource:"@veltra/app"}]],plugins:[E,x]}}exports.default=b;
//# sourceMappingURL=index.js.map
